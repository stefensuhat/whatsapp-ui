/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as authLayoutImport } from './routes/auth/layout'
import { Route as indexImport } from './routes/index'
import { Route as authIndexImport } from './routes/auth/index'
import { Route as authLoginImport } from './routes/auth/login'

// Create/Update Routes

const authLayoutRoute = authLayoutImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const indexRoute = indexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const authIndexRoute = authIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => authLayoutRoute,
} as any)

const authLoginRoute = authLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => authLayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof indexImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof authLayoutImport
      parentRoute: typeof rootRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof authLoginImport
      parentRoute: typeof authLayoutImport
    }
    '/auth/': {
      id: '/auth/'
      path: '/'
      fullPath: '/auth/'
      preLoaderRoute: typeof authIndexImport
      parentRoute: typeof authLayoutImport
    }
  }
}

// Create and export the route tree

interface authLayoutRouteChildren {
  authLoginRoute: typeof authLoginRoute
  authIndexRoute: typeof authIndexRoute
}

const authLayoutRouteChildren: authLayoutRouteChildren = {
  authLoginRoute: authLoginRoute,
  authIndexRoute: authIndexRoute,
}

const authLayoutRouteWithChildren = authLayoutRoute._addFileChildren(
  authLayoutRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof indexRoute
  '/auth': typeof authLayoutRouteWithChildren
  '/auth/login': typeof authLoginRoute
  '/auth/': typeof authIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof indexRoute
  '/auth/login': typeof authLoginRoute
  '/auth': typeof authIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof indexRoute
  '/auth': typeof authLayoutRouteWithChildren
  '/auth/login': typeof authLoginRoute
  '/auth/': typeof authIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/auth' | '/auth/login' | '/auth/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/auth/login' | '/auth'
  id: '__root__' | '/' | '/auth' | '/auth/login' | '/auth/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  indexRoute: typeof indexRoute
  authLayoutRoute: typeof authLayoutRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  indexRoute: indexRoute,
  authLayoutRoute: authLayoutRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/auth"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/auth": {
      "filePath": "auth/layout.tsx",
      "children": [
        "/auth/login",
        "/auth/"
      ]
    },
    "/auth/login": {
      "filePath": "auth/login.tsx",
      "parent": "/auth"
    },
    "/auth/": {
      "filePath": "auth/index.tsx",
      "parent": "/auth"
    }
  }
}
ROUTE_MANIFEST_END */
